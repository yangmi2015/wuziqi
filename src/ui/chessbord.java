/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import em.player;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author yangmi
 */
public class chessbord extends javax.swing.JPanel {

    /**
     * Creates new form chessbord
     */
    private static int column =20;
    private static int row =20;
    private static int gap =20;
    private int clickX;
    private int clickY;
    private state.Chessaction action;
    private state.Chessstate condition;
    
    public chessbord() {
        initComponents();
        this.setSize(400, 400);
        condition =new state.Chessstate();
        action =new state.Chessaction(condition);
        
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2= (Graphics2D) g;
        for(int i=0;i<=row;i++){
            g2.setColor(Color.black);
            g2.drawLine(20, i*gap+gap, 420-1, i*gap+gap);
        }
        for(int i=0;i<=column;i++){
            g2.drawLine(i*gap+gap, 20, i*gap+gap, 420-1);
        }
        for(int i=0;i<=20;i++){
            for(int j=0;j<=20;j++){
                if(condition.state[i][j]==0)continue;
                if(condition.state[i][j]=='*'){
            g.setColor(Color.white);
        }else{
            g.setColor(Color.black);
        }
        g.fillOval(i*gap+20-8, j*gap+20-8, 16, 16);
        g.setColor(Color.black);
        g.drawOval(i*gap+20-8, j*gap+20-8, 16, 16);
            }
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
         clickX=evt.getX();
        clickY=evt.getY();
        
        int chess_X=Math.round((float)(clickX-20)/gap);
        int chess_Y=Math.round((float)(clickY-20)/gap);
        if(chess_X>=0&&chess_X<=20&&chess_Y>=0&&chess_Y<=20){
            if(condition.state[chess_X][chess_Y]!=0)return;
        action.set(chess_X, chess_Y, player.Players.me);
        refresh();
        
        }else{
        return;
        }
        alphabeta.algorism cul=new alphabeta.algorism(condition,action);
//        cul.run();
//        refresh();
        Thread t=new Thread(cul);
        t.start();
        try {
            
            t.join();
            refresh();
            if(condition.win()!=null){
                JOptionPane.showMessageDialog(this, condition.win().toString().equals("opp")?"compute win":"you win");
                repaint();
                this.condition=new state.Chessstate();
                action =new state.Chessaction(condition);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(chessbord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formMouseClicked
    public void refresh(){
        Graphics2D  g= (Graphics2D) this.getGraphics();
        if(action.getPlayer()==em.player.Players.me){
            g.setColor(Color.white);
        }else{
            g.setColor(Color.black);
        }
        g.fillOval(action.getX()*gap+20-8, action.getY()*gap+20-8, 16, 16);
        g.setColor(Color.black);
        g.drawOval(action.getX()*gap+20-8, action.getY()*gap+20-8, 16, 16);
    }
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
      
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
